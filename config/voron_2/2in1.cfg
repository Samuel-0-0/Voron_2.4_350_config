
# 变量存储
[gcode_macro _FILAMENT_VARS] # 定义一个用于管理耗材的变量宏
variable_activespool: None # 当前活跃的耗材卷，初始状态为无卷选择
variable_count: 0 # 用于追踪或记录特定用途的计数变量
variable_jam_retry: 0 # 用于记录卡料（堵塞）重试次数的计数变量
variable_infinitespool: 1 # 启用无限耗材模式，1表示开启
variable_bowden_length: 500 # Bowden管长度，可通过运行MEASURE_BOWDEN宏进行估算
variable_slow_feed_length: 200 # 加载或移除耗材时的缓慢送料长度，用于在进出时绕过编码器或Y分流器以提高可靠性
variable_slow_remove_length: 100 # 卸料时缓慢退料的长度，用于确保退出挤出机
variable_bowden_calculate: 0 # 用于Bowden管长度计算的临时变量
gcode: # Gcode部分留空，仅作提醒，不做任何操作
    {action_respond_info(" 执行_FILAMENT_VARS宏不会产生任何操作")}

# 步进电机设置
[extruder_stepper left_filament_stepper] 
extruder: 
step_pin: pcu:left_step # 步进电机步进引脚为左侧步进引脚
dir_pin: pcu:left_dir # 步进电机方向引脚为左侧方向引脚
enable_pin: !pcu:left_enable # 步进电机使能引脚为左侧使能引脚，且为反向使能
microsteps: 16 # 设置微步数为16
rotation_distance: 22.7409 # 设置步进电机的旋转距离（单位：毫米），通常是每转一圈多少毫米
gear_ratio: 50:10 # 齿轮比，50:10表示大齿轮与小齿轮的比率
microsteps: 16 # 设置微步为16
full_steps_per_rotation: 200 # 每圈步进的全步数，通常为200

[tmc2209 extruder_stepper left_filament_stepper] 
uart_pin: pcu:left_uart # UART引脚为左侧UART引脚
run_current: 0.6 # 步进电机运行电流为0.6A
stealthchop_threshold: 0 # 设置StealthChop模式的阈值为0（即启用安静模式）
interpolate: True # 启用插值，以减少步进电机的噪音和震动

[extruder_stepper right_filament_stepper] 
extruder: 
step_pin: pcu:right_step # 步进电机步进引脚为右侧步进引脚
dir_pin: pcu:right_dir # 步进电机方向引脚为右侧方向引脚
enable_pin: !pcu:right_enable # 步进电机使能引脚为右侧使能引脚，且为反向使能
microsteps: 16 # 设置微步数为16
rotation_distance: 22.7409 # 设置步进电机的旋转距离（单位：毫米）
gear_ratio: 50:10 # 齿轮比为50:10
microsteps: 16 # 设置微步为16
full_steps_per_rotation: 200 # 每圈步进的全步数，通常为200

[tmc2209 extruder_stepper right_filament_stepper] 
uart_pin: pcu:right_uart # UART引脚为右侧UART引脚
run_current: 0.6 # 步进电机运行电流为0.6A
stealthchop_threshold: 0 # 设置StealthChop模式的阈值为0
interpolate: True # 启用插值模式

# 传感器配置

[filament_switch_sensor left_pre_stepper]
switch_pin: ^pcu:left_pre_stepper # 左侧前步进电机传感器的开关引脚
pause_on_runout: False # 发生缺料时不暂停打印
insert_gcode:
  {% set OriginalState = printer.print_stats.state %} 
  {% if not (OriginalState == "paused" or OriginalState == "printing") %} 
    RESPOND MSG="Left filament inserted" # 当左侧馈线插入时回应消息
    {% for step in range(50) %} 
      M400 # 等待缓冲区清空
      _PRELOAD_FILAMENT SIDE=LEFT # 预加载左侧馈线
    {% endfor %}
    FORCE_MOVE STEPPER='extruder_stepper left_filament_stepper' DISTANCE=-10 VELOCITY=20 # 强制移动左侧馈线步进电机，距离为-10，速度为20
    {% if printer['gcode_macro _FILAMENT_VARS'].activespool == None %} 
      ACTIVATE_LEFT_SPOOL # 激活左侧馈线卷轴
    {% endif %}
  {% endif %}
runout_gcode:
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    {% set CURRENT_TEMP = printer['extruder'].target %} 
    {% set OriginalState = printer.print_stats.state %} 
    {% if OriginalState == "printing" and  printer['filament_switch_sensor left_post_stepper'].filament_detected and not  printer['filament_switch_sensor right_post_stepper'].filament_detected %} 
      RESPOND MSG="Left Pre-Stepper Sensor detected runout. Disabling SFS" # 左侧前步进传感器检测到缺料，禁用馈线传感器
      G92 E0 # 重置挤出机位置
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0 # 禁用馈线传感器
    {% endif %}

[filament_switch_sensor right_pre_stepper]
switch_pin: ^pcu:right_pre_stepper # 右侧前馈线传感器的开关引脚
pause_on_runout: False # 发生缺料时不暂停打印
insert_gcode:
  {% set OriginalState = printer.print_stats.state %} 
  {% if not (OriginalState == "paused" or OriginalState == "printing") %} 
    RESPOND MSG="Right filament inserted" # 当右侧馈线插入时回应消息
    {% for step in range(50) %} 
      M400 # 等待缓冲区清空
      _PRELOAD_FILAMENT SIDE=RIGHT # 预加载右侧馈线
    {% endfor %}
    FORCE_MOVE STEPPER='extruder_stepper right_filament_stepper' DISTANCE=-10 VELOCITY=20 # 强制移动右侧馈线步进电机，距离为-10，速度为20
    {% if printer['gcode_macro _FILAMENT_VARS'].activespool == None %} 
      ACTIVATE_RIGHT_SPOOL # 激活右侧馈线卷轴
    {% endif %}
  {% endif %}
runout_gcode:
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    {% set CURRENT_TEMP = printer['extruder'].target %} 
    {% set OriginalState = printer.print_stats.state %} 
    {% if OriginalState == "printing" and  printer['filament_switch_sensor right_post_stepper'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected %} 
      RESPOND MSG="Right Pre-Stepper Sensor detected runout. Disabling SFS" # 右侧前步进传感器检测到缺料，禁用馈线传感器
      G92 E0 # 重置挤出机位置
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0 # 禁用馈线传感器
    {% endif %}

[filament_switch_sensor pre_extruder]
switch_pin: ^fycombo:pre_extruder # 前馈线传感器的开关引脚
pause_on_runout: False # 发生缺料时不暂停打印
runout_gcode:
  {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
  {% set CURRENT_TEMP = printer['extruder'].target %} 
  {% set OriginalState = printer.print_stats.state %}

  {% if OriginalState == "printing" %} 
    PAUSE # 暂停打印
    {% if printer["gcode_macro _FILAMENT_VARS"].infinitespool %} 
      GO_TO_PURGE # 前往清理区
      {% if printer["gcode_macro _FILAMENT_VARS"].activespool == 'left' %} 
        RESPOND MSG="Changing to Right" # 如果当前使用的是左侧馈线，则更改为右侧馈线
        ACTIVATE_RIGHT_SPOOL # 激活右侧馈线卷轴
      {% elif printer["gcode_macro _FILAMENT_VARS"].activespool == 'right' %}  
        RESPOND MSG="Changing to Left" # 如果当前使用的是右侧馈线，则更改为左侧馈线
        ACTIVATE_LEFT_SPOOL # 激活左侧馈线卷轴
      {% endif %}
      INFSPOOL_LOAD_FILAMENT # 加载无限馈线
      G4 P2000 # 延时 2000 毫秒，等待加载完成
      SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL} # 设置速度限制，恢复原来的加速度
      RESUME # 恢复打印
    {% else %}
      RESPOND TYPE=error msg="!! FILAMENT RUNOUT !!" # 如果没有无限馈线，报告缺料错误
    {% endif %}
  {% endif %}

[filament_switch_sensor post_extruder]
switch_pin: ^fycombo:post_extruder # 后馈线传感器的开关引脚
pause_on_runout: False # 发生缺料时不暂停打印

[gcode_button speed_control]
pin: ^pcu:speed_control # 用于控制打印速度的按钮引脚
press_gcode:
  # 按下按钮时，增加进料速度，降低转速
  FEED_FASTER
release_gcode:
  # 松开按钮时，减缓进料速度，增加转速
  FEED_SLOWER

[filament_motion_sensor encoder_sensor]
detection_length: 10 # 检测到的最小馈线长度为10mm，用于触发状态变化
#   这个传感器用于监测馈线的运动
extruder: extruder # 该传感器与当前挤出机关联
switch_pin: ^pcu:encoder # 编码器的开关引脚
pause_on_runout: False # 发生缺料时不暂停打印
runout_gcode:
  {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
  {% set CURRENT_TEMP = printer['extruder'].target %} 
  {% set OriginalState = printer.print_stats.state %}

  {% if OriginalState == "printing" %} 
    PAUSE # 暂停打印
    RESPOND TYPE=error msg="!! JAM DETECTED !!" # 报告馈线卡住错误
  {% endif %}


#####################################################################
# 屏幕菜单
#####################################################################

# Main
#  + Power Off
#  + Flexplate
#    + Set Name
#    + Offset 0.0
#  + Tune
#    + Speed: 0%
#    + Flow: 0%
#    + Offset Z:0.0
#  + SD Card
#    + Show loaded file
#    + Load File
#    + Unload File
#    + Start printing
#    + Pause printing
#    + Resume printing
#    + Cancel printing
#  + Control
#    + Fan 
#      + Cooling
#        + Toggle: OFF
#        + Speed:   0%
#      + Chamber
#        + Toggle: OFF
#        + Temp:    0C
#      + Filter
#        + Toggle: OFF
#        + Speed:   0%
#    + Lights
#      + Toggle: OFF
#      + Dim:     0%
#    + Runout
#      + Runout:   ON
#      + Toolhead: ON
#    + Home [ALL / Z / X Y]
#    + Park
#    + Move
#      + Move Step: 0
#      + Move X: 0.0
#      + Move Y: 0.0
#      + Move Z: 0.0
#      + Move E: +0.0
#    + Steppers off
#  + Temperature
#    + E0:  0.0 (0.0)
#    + Bed: 0.0 (0.0)
#  + Filament
#    + Load
#    + Unload
#    + Feed: 0.0
#  + Satistic
#    + Time of Operation
#    + Total Filament used
#    + Time since Filter change
#    + Time since Service
#    + Reset Filter time
#    + Reset Service time

[gcode_macro _MENU_LIMITS]
variable_move: {}
gcode:
  {% set list  = [0.1,0.5,1,5,10,50,100] %} ; define your input list
  {% set max   = printer.toolhead.axis_maximum %}
  {% set min   = printer.toolhead.axis_minimum %}
  {% set index = params.INDEX|int if params.INDEX is defined and params.INDEX|int < list|length else 0 %}
  {% set move  = {'index': {'i': index, 'list': list },
                  'step' : list[index],
                  'max'  : {'x': ((max.x - min.x) / list[index])|int,
                            'y': ((max.y - min.y) / list[index])|int,
                            'z': ( max.z          / list[index])|int,
                            'e': (printer.configfile.settings.extruder.max_extrude_only_distance / list[index])|int}} %}
  SET_GCODE_VARIABLE MACRO=_MENU_LIMITS VARIABLE=move VALUE="{move}"

[menu __voron_main]
type: list
name: Main

[menu __voron_main __power_off]
type: command
enable: {not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused") and 
         'gcode_macro PRINTER_OFF' in printer}
name: Power Off
gcode: {menu.exit()} PRINTER_OFF

[menu __voron_main __flexplate]
type: list
name: Flexplate: {printer.save_variables.variables.plates.array[printer.save_variables.variables.plates.index].name} 
enable: {'plates' in printer.save_variables.variables and 
         not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}

[menu __voron_main __flexplate __set]
type: input
name:  Set: {printer.save_variables.variables.plates.array[menu.input|int].name}
input: {printer.save_variables.variables.plates.index}
input_min: 0
input_max: {printer.save_variables.variables.plates.array|length - 1}
gcode: SET_PLATE INDEX={menu.input|int}

[menu __voron_main __flexplate __offset]
type: input
name:  Offset:{'%01.3f' % menu.input}
input: {printer.save_variables.variables.plates.array[printer.save_variables.variables.plates.index].offset}
input_min: -1.0
input_max: 1.0
input_step: 0.001
gcode: CHANGE_PLATE_VALUE OFFSET={menu.input|float}

[menu __voron_main __tune]
type: list
enable: {printer.print_stats.state == "printing" or printer.print_stats.state == "paused"}
name: Tune

[menu __voron_main __tune __speed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0.01
input_max: 5
input_step: 0.01
realtime: True
gcode: M220 S{'%d' % (menu.input*100)}

[menu __voron_main __tune __flow]
type: input
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode: M221 S{'%d' % (menu.input*100)}

[menu __voron_main __tune __offsetz]
type: input
name: Offset Z:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode: SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1
    
[menu __voron_main __sdcard]
type: list
enable: {'virtual_sdcard' in printer}
name: SD Card

[menu __voron_main __sdcard __file]
type: command
name: File: {printer.print_stats.filename}

[menu __voron_main __sdcard __load]
type: vsdlist
enable: {not printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Load file

[menu __voron_main __sdcard __unload]
type: command
enable: {printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Unload file
gcode:
  {menu.back()} SDCARD_RESET_FILE

[menu __voron_main __sdcard __start]
type: command
enable: {printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Start print
gcode:
  {menu.exit()}
  UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10
  M24

[menu __voron_main __sdcard __pause]
type: command
enable: {printer.print_stats.state == "printing"}
name: Pause print
gcode:
  {menu.back()} PAUSE

[menu __voron_main __sdcard __resume]
type: command
enable: {printer.print_stats.state == "paused"}
name: Resume print
gcode:
  {menu.exit()}
  UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10
  RESUME

[menu __voron_main __sdcard __cancel]
type: command
enable: {printer.print_stats.state == "paused"}
name: Cancel print
gcode:
  {menu.exit()}
  UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10
  CANCEL_PRINT

[menu __voron_main __control]
type: list
name: Control

[menu __voron_main __control __fan]
type: list
name: Fan 

[menu __voron_main __control __fan __partcooling]
type: list
enable: {'fan' in printer}
name: Cooling {'%3d%s' % (printer.fan.speed*100,'%') if printer.fan.speed else 'OFF'}

[menu __voron_main __control __fan __partcooling __fanonoff]
type: input
name: Toggle: {'ON' if menu.input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 1
gcode: M106 S{255 if menu.input else 0}

[menu __voron_main __control __fan __partcooling __fanspeed]
type: input
name: Speed:  {'%3d%s' % (menu.input*100,'%') if menu.input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode: M106 S{'%d' % (menu.input*255)}

[menu __voron_main __control __fan __chamber]
type: list
enable: {'temperature_fan Chamber' in printer}
name: Chamber {'%2dC' % (printer['temperature_fan Chamber'].target) if printer['temperature_fan Chamber'].target else 'OFF'}

#[menu __voron_main __control __fan __chamber __chamberonoff]
#type: input
#name: Toggle: {'ON' if menu.input else 'OFF'}
#input: {printer['temperature_fan Chamber'].target}
#input_min: 0
#input_max: 1
#input_step: 1
#gcode: M141 S{15 if menu.input else 0}    
    
#[menu __voron_main __control __fan __chamber __chamberfanspeed]
#type: input
#name: Temp:   {'%2dC' % (menu.input) if menu.input else 'OFF'}
#input: {printer['temperature_fan Chamber'].target}
#input_min: {printer.configfile.settings['temperature_fan Chamber'].min_temp|int}
#input_max: {printer.configfile.settings['temperature_fan Chamber'].max_temp|int}
#input_step: 1
#gcode: M141 S{'%d' % (menu.input)}

[menu __voron_main __control __fan __filter]
type: list
enable: {'fan_generic filter' in printer}
name: Filter  {'%3d%s' % (printer['fan_generic filter'].speed*100,'%') if printer['fan_generic filter'].speed else 'OFF'}

[menu __voron_main __control __fan __filter __filteronoff]
type: input
name: Toggle: {'ON ' if menu.input else 'OFF'}
input: {printer['fan_generic filter'].speed}
input_min: 0
input_max: 1
input_step: 1
gcode: {% if menu.input %} _FILTER_ON {% else %} _SET_FILTER S=0.0 {% endif %}

[menu __voron_main __control __fan __filter __filterspeed]
type: input
name: Speed:  {'%3d%s' % (menu.input*100,'%') if menu.input else 'OFF'}
input: {printer['fan_generic filter'].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode: _SET_FILTER S={menu.input}
    
[menu __voron_main __control __lights]
type: list
enable: {'output_pin caselight' in printer}
name: Lights {'ON' if printer['output_pin caselight'].value != 0 else 'OFF'}

[menu __voron_main __control __lights __caselightonoff]
type: input
enable: {'output_pin caselight' in printer}
name: Toggle: {'ON ' if menu.input else 'OFF'}
input: {printer['output_pin caselight'].value}
input_min: 0
input_max: 1
input_step: 1
gcode: {% if menu.input %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}

[menu __voron_main __control __lights __caselightpwm]
type: input
enable: {'output_pin caselight' in printer}
name: Dim:    {'%3d%s' % (menu.input*100,'%') if menu.input else 'OFF'}
input: {printer['output_pin caselight'].value}
input_min: 0.0
input_max: 1.0
input_step: 0.01
gcode: SET_PIN PIN=caselight VALUE={menu.input}

[menu __voron_main __control __home]
type: input
enable: {not printer.print_stats.state == "printing" }
name: Home: {['ALL','Z','X Y'][menu.input|int]}
input: 0
input_min: 0
input_max: 2
gcode: {['G28','G28 Z','G28 X Y'][menu.input|int]}
  
[menu __voron_main __control __park_pos]
type: input
enable: {not printer.print_stats.state == "printing" }
name: Park: {['Bed','Center','Rear','Front','FrontLow'][menu.input|int]}
input: 0
input_min: 0
input_max: 4
gcode: PARK P={['BED','CENTER','REAR','FRONT', 'FRONTLOW'][menu.input|int]}

[menu __voron_main __control __move]
type: list
enable: {not printer.print_stats.state == "printing"}
name: Move

[menu __voron_main __control __move __move_select]
type: input
name: Move Step: {printer['gcode_macro _MENU_LIMITS'].move.index.list[menu.input|int]}
input: {printer['gcode_macro _MENU_LIMITS'].move.index.i}
input_min: 0
input_max: {printer['gcode_macro _MENU_LIMITS'].move.index.list|length - 1}
input_step: 1
gcode: _MENU_LIMITS INDEX={menu.input|int}

[menu __voron_main __control __move __move_x]
type: input
name: Move X: {'%05.1f' % (printer.toolhead.axis_minimum.x + menu.input * printer['gcode_macro _MENU_LIMITS'].move.step) if 'x' in printer.toolhead.homed_axes else 'unhomed' }
input: {((printer.gcode_move.gcode_position.x - printer.toolhead.axis_minimum.x) / printer['gcode_macro _MENU_LIMITS'].move.step)|int}
input_min: 0
input_max: {printer['gcode_macro _MENU_LIMITS'].move.max.x}
input_step: 1
realtime: True
gcode:
  SAVE_GCODE_STATE NAME=__move__axis
  G90
  G1 X{printer.toolhead.axis_minimum.x + menu.input * printer['gcode_macro _MENU_LIMITS'].move.step} F6000
  RESTORE_GCODE_STATE NAME=__move__axis
  
[menu __voron_main __control __move __move_y]
type: input
name: Move Y: {'%05.1f' % (printer.toolhead.axis_minimum.y + menu.input * printer['gcode_macro _MENU_LIMITS'].move.step) if 'y' in printer.toolhead.homed_axes else 'unhomed' }
input: {((printer.gcode_move.gcode_position.y - printer.toolhead.axis_minimum.y) / printer['gcode_macro _MENU_LIMITS'].move.step)|int}
input_min: 0
input_max: {printer['gcode_macro _MENU_LIMITS'].move.max.y}
input_step: 1
realtime: True
gcode:
  SAVE_GCODE_STATE NAME=__move__axis
  G90
  G1 Y{printer.toolhead.axis_minimum.y + menu.input * printer['gcode_macro _MENU_LIMITS'].move.step} F6000
  RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron_main __control __move __move_z]
type: input
name: Move Z: {'%05.1f' % (menu.input * printer['gcode_macro _MENU_LIMITS'].move.step) if 'z' in printer.toolhead.homed_axes else 'unhomed' }
input: {((printer.gcode_move.gcode_position.z - printer.toolhead.axis_minimum.z) / printer['gcode_macro _MENU_LIMITS'].move.step)|int}
input_min: 0
input_max: {printer['gcode_macro _MENU_LIMITS'].move.max.z}
input_step: 1
realtime: True
gcode:
  SAVE_GCODE_STATE NAME=__move__axis
  G90
  G1 Z{printer.toolhead.axis_minimum.z + menu.input * printer['gcode_macro _MENU_LIMITS'].move.step}  F900
  RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron_main __control __move __move_e]
type: input
name: Move E: {'%+06.1f' % (menu.input * printer['gcode_macro _MENU_LIMITS'].move.step) if printer.extruder.can_extrude else 'to cold'}
input: 0
input_min: -{printer['gcode_macro _MENU_LIMITS'].move.max.e}
input_max: {printer['gcode_macro _MENU_LIMITS'].move.max.e}
input_step: 1
gcode:
  SAVE_GCODE_STATE NAME=__move__axis
  M83
  G1 E{menu.input * printer['gcode_macro _MENU_LIMITS'].move.step} F240
  RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron_main __control __disable]
type: command
name: Steppers off
enable: {not printer.print_stats.state == "printing"}
gcode: M84

[menu __voron_main __temp]
type: list
name: Temperature

[menu __voron_main __temp __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"E0: %3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __voron_main __temp __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: M140 S{'%.0f' % menu.input}

[menu __voron_main __filament]
type: list
name: Filament

[menu __voron_main __filament __load]
type: command
name: Load
gcode: FILAMENT_LOAD
  
[menu __voron_main __filament __unload]
type: command
name: Unload
gcode: FILAMENT_UNLOAD

[menu __voron_main __filament __feed]
type: input
name: Feed: {'%.1f' % menu.input if printer.extruder.can_extrude else 'to cold'}
input: 5
input_min: -{printer.configfile.settings.extruder.max_extrude_only_distance}
input_max: {printer.configfile.settings.extruder.max_extrude_only_distance}
input_step: 0.1
gcode:
  SAVE_GCODE_STATE NAME=__filament__load
  M83
  G1 E{'%.1f' % menu.input} F60
  RESTORE_GCODE_STATE NAME=__filament__load

[menu __voron_main __statistic]
type: list  
enable: {'print_stats' in printer.save_variables.variables}
name: Satistic

[menu __voron_main __statistic __totaltime]
type: command
name: Time of Operation
gcode:
  {menu.exit()}
  _DISPLAY_PRINT_TIME PREFIX=Total SECONDS={printer.save_variables.variables.print_stats.time.total}
  UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10
  
[menu __voron_main __statistic __filament]
type: command
name: Total Filament used
gcode:
  {menu.exit()}
  M117 Filerment {'%.4f' % (printer.save_variables.variables.print_stats.filament|float / 1000.0)}m
  {action_respond_info("Total Filament printed: %.4fm" % (printer.save_variables.variables.print_stats.filament|float / 1000.0))}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10

[menu __voron_main __statistic __filtertime]
type: command
name: Time since Filter change
gcode:
  {menu.exit()}
  _DISPLAY_PRINT_TIME PREFIX=Filter SECONDS={printer.save_variables.variables.print_stats.time.filter}
  UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10

[menu __voron_main __statistic __servicetime]
type: command
name: Time since Service
gcode:
  {menu.exit()}
  _DISPLAY_PRINT_TIME PREFIX=Service SECONDS={printer.save_variables.variables.print_stats.time.service}
  UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10
  
  
[menu __voron_main __statistic __rst_filter]
type: command
enable: {not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Reset Filter time
gcode:
  {menu.exit()}
  RST_FILTER
  UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10

    
[menu __voron_main __statistic __rst_service]
type: command
enable: {not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Reset Service time
gcode:
  {menu.exit()}
  RST_SERVICE
  UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10

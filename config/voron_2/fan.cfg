################################################################################
# VORON 2.4  350mm  打印机配置文件
################################################################################
# COPYRIGHT © 2021 - 2025  Samuel Wang
# 本文件可以根据GNU GPLv3许可协议进行分发
# This file may be distributed under the terms of the GNU GPLv3 license
################################################################################
# Discord: Samuel-0-0#0576    Github: Samuel-0-0    Bilibili: Samuel-0_0
################################################################################
# 文件用途：其他风扇配置
################################################################################
# 根据你的设置编辑此文件
################################################################################

[fan_generic Eco_turbo]
pin: PD15   # 控制风扇的输出引脚，此项必填。
max_power:1  
# 若需微调max_power参数以适应您的主板，先设置为1.0，在Klipper仪表板中逐步增加风扇速度，直到实际速度不再随设定值上升而上升。将此速度除以100，填入max_power参数即可。
# 此参数定义了引脚所允许的最大功率(0.0到1.0之间)。
# 取值1.0允许引脚长期全功率驱动，而0.5则意味着最多只能驱动一半的时间。
# 此设置用于限制风扇长期的总功率输出。
# 若此值低于1.0，风扇速度请求将依此值缩放(如max_power为0.9且请求80%速度，实际输出功率为72%) 。
shutdown_speed: 0 
# 当微控制器软件出错时，风扇所需速度(0.0到1.0之间)。
# 默认为0。
cycle_time: 0.01 
# 每个 PWM 功率周期到风扇的时间（以秒为单位）。
# 建议在使用基于软件的 PWM 时，此值为10毫秒或更大。
# 默认为0.010秒。
hardware_pwm: False 
# 勾选此项启用硬件PWM，否则使用软件PWM。
# 大多数风扇不太适用硬件PWM，除非需要高速切换，否则不建议启用。
# 使用硬件PWM时，实际占空周期时间受实现方式限制，可能与所设cycle_time有较大出入。
# 默认为False。
# kick_start_time: 0.100 
# 在首次启用或将其增加超过50%时，运行风扇全速的时间（以秒为单位），以帮助启动风扇旋转。
# 默认为0.100秒。
off_below: 0.14
# 当占空比低于14%时，此款无刷驱动将无法驱动鼓风机。在Max_power为1的情况下，off_below应设置为0.14。
# 调试此设置时，逐步降低风扇速度，确定能可靠驱动鼓风机而不失速的最低输入速度。
# 将off_below设置为该速度对应的占空比(如14% -> 0.14/Max_power -> 0.14/1 -> 0.14)，或略高即可。
# 此参数为能驱动风扇的最低输入速度(0.0到1.0之间)。
# 当请求速度低于off_below时，风扇将被关闭。
# 此设置有助于防止风扇失速，并确保良好的启动响应。
# 调试时，先将off_below设为0.0，让风扇运转。
# 逐步降低风扇速度，确定能可靠驱动鼓风机而不失速的最低输入速度。
# 将off_below设置为该速度对应的占空比(如12% -> 0.12)或略高。


## 驱动散热风扇 FAN0
[controller_fan tmc_fan]
pin: PD13                           # 风扇控制引脚
kick_start_time: 1.0                # 风扇启动后全速的运行时间，单位秒
max_power: 1.0                      # 风扇最大输出功率，0~1对应0%~100%（默认：1.0）
fan_speed: 0.7                      # 限制风扇最高转速
stepper: stepper_x                  # 关联驱动
off_below: 0.3                      # 防止风扇失速的最小功率值

## 电器仓散热风扇
#[temperature_fan tmc_fan]
#pin: PD13                            # 风扇控制引脚
##tachometer_pin: ^FAN6_TACH          # 风扇测速引脚
##tachometer_ppr:                     # 每转的转速表信号脉冲数，无刷直流电机风扇通常是极数的一半，默认2
##tachometer_poll_interval: 0.0056    # 轮询周期，小于30/(tachometer_ppr*rpm)，默认0.0015。30/2/2700=0.0056
##max_power: 1.0                      # 风扇最大输出功率，0~1对应0%~100%（默认：1.0）
##cycle_time: 0.01                    # 默认100HZ PWM信号：0.01 ，25KHZ PWM信号：0.00004
#kick_start_time: 0.50                # 风扇启动后全速的运行时间，单位秒
########### 单个传感器
#sensor_type: temperature_mcu         # 温度传感器类型
##sensor_mcu: mcu                      # 指定MCU名称
########### 多传感器组合
##sensor_type: temperature_combined                                 # 组合传感器
##sensor_list: temperature_sensor M8P, temperature_sensor CPU       # 需要编组的传感器
##combination_method: max                                           # 用最大值
##maximum_deviation: 999.9                                          # 无视差异大小
###########
#control: pid                        # 控制类型
#pid_kp: 2.0  #1.0
#pid_ki: 5.0  #0.5
#pid_kd: 0.5  #2.0
#pid_deriv_time: 2.0                 # PID调整平滑时间
#min_temp: 0                         # 传感器最低温度
#max_temp: 80                        # 传感器最高温度，到达此温度会触发急停
#target_temp: 27.5                   # 在目标温度或者高于目标温度时风扇将100%运行，低于目标温度将根据PID自动调整转速
#max_speed: 1.0                      # 风扇最高速度
#min_speed: 0.0                      # 风扇最低速度
#off_below: 0.19                     # 风扇转速低于设定值后关闭
#shutdown_speed: 0.0                 # 系统错误停止后的风扇速度

## 散热风扇
[fan_generic tach_fan]
pin: ebb:TOOL_FAN2                            # 风扇控制引脚
kick_start_time: 1.0                # 风扇启动后全速的运行时间，单位秒
max_power: 0.8                      # 风扇最大输出功率，0~1对应0%~100%（默认：1.0）
off_below: 0.4                      # 防止风扇失速的最小功率值
tachometer_pin: ^ebb:TOOL_FAN2_DET          # 风扇测速引脚
#tachometer_ppr:                     # 每转的转速表信号脉冲数，无刷直流电机风扇通常是极数的一半，默认2
#tachometer_poll_interval: 0.0056    # 轮询周期，小于30/(tachometer_ppr*rpm)，默认0.0015。30/2/2700=0.0056

## 热床底部风扇 FAN2
#[temperature_fan cycle_fan]
#pin: PD12
#max_power: 0.7
#shutdown_speed: 0.0
#kick_start_time: 0.500
#sensor_type: NTC 100K MGB18-104F39050L32
#sensor_pin: PF4
#min_temp: 0
#max_temp: 50
#target_temp: 30

##############################
##         内循环           ##
##############################
#[pwm_tool nevermore]
#pin: PD12
#shutdown_value: 1                 # MCU关机事件触发的状态
#value: 0                          # 系统初始化触发的状态
#hardware_pwm: False               # 启用此选项以使用硬件PWM而不是软件PWM
#cycle_time: 0.100                 # PWM周期时间，硬PWM建议用0.1，软PWM建议用0.01
#scale:                            # 设置value的缩小比例，比如设置0.9时候value设置成1实际输出只有0.9

#[gcode_macro Nevermore_on]
#gcode:
#    set_pin pin=nevermore value=1

#[gcode_macro Nevermore_off]
#gcode:
#    set_pin pin=nevermore value=0

#[gcode_macro M141]
#description: Set temperature of chamber fan
#gcode:
#    SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target={params.S|default(0)}

## 内循环
[fan_generic nevermore]
pin: PD12
max_power: 1.0
shutdown_speed: 0.0

## 关闭内循环
[delayed_gcode NEVERMORE_OFF]
gcode:
    SET_FAN_SPEED FAN=nevermore SPEED=0

## 根据热床温度设置内循环风扇速度
[gcode_macro TEMPERATURE_ADJUSTED_PRINT_START_SETTINGS]
description: 根据热床温度设置内循环风扇速度
gcode:
    SAVE_GCODE_STATE NAME=temperature_adjust

    # 取消先前的等待事件
    UPDATE_DELAYED_GCODE ID=NEVERMORE_FAN_OFF DURATION=0

    # ABS/ASA
    {% if printer.heater_bed.target >= 100 %}
        # 打印的时候开启内循环
        SET_FAN_SPEED FAN=nevermore SPEED=1.0
    # PETG
    {% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
        # 打印PETG的时候关闭内循环
        SET_FAN_SPEED FAN=nevermore SPEED=0.0
    # 其他 (PLA/TPU)
    {% else %}
        # 打印的时候开启内循环，但控制运行速度
        SET_FAN_SPEED FAN=nevermore SPEED=0.5
    {% endif %}

    RESTORE_GCODE_STATE NAME=temperature_adjust


### 以下代码用于检测可测速风扇的运行状态，风扇异常则暂停打印并关闭热端加热 ###
# 具体操作方法：https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/hotend_fan_monitoring.html

# Author: alch3my#9819 
# Requires a 3-wire fan with tachometer_pin defined. https://www.klipper3d.org/Config_Reference.html#heater_fan 
# The tach wire can be connected to a spare endstop pin.  
# Don't forget a pullup (^) on the tach pin (example: tachometer_pin: ^P1.29) 

# Monitoring loop. Begins at Klipper start. 
[delayed_gcode CHECK_ALL_FANS] 
# Klipper启动后就开始检测，如果要停用就设置为 0
initial_duration: 0
gcode: 
    HOTEND_FAN_CHECK 
    UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=3

# Change min_rpm and max_consecutive_stops to your desired values. 
[gcode_macro HOTEND_FAN_CHECK]
description: 检查热端散热风扇
variable_he_stop_count: 0 
gcode: 
    {% set min_rpm = 3000|float %}
    {% set max_consecutive_stops = 3 %}
    {% set rpm = printer['heater_fan hotend_fan'].rpm|float %}
    {% set he_target = printer[printer.toolhead.extruder].target|float %}
    {% set he_temp = printer[printer.toolhead.extruder].temperature|float %}
    {% set fan_on_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp|float %}
    {% set he_stop_count = printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int %}

    {% if (he_target >= fan_on_temp) and (rpm < min_rpm) and (he_temp >= fan_on_temp) %}
        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE={he_stop_count + 1}
        M118 WARNING: Fan stoppage detected ({he_stop_count+1}/{max_consecutive_stops}).
        M400
        {% if printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int >= max_consecutive_stops-1 %}
            FAN_STOPPAGE_ROUTINE
        {% endif %}
    {% else %}
        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE=0
    {% endif %}

# Insert the gcode that you want to run when a fan stoppage is detected. 
# This runs every ~3 seconds until the stop conditions are cleared. 
[gcode_macro FAN_STOPPAGE_ROUTINE] 
description: 检测到风扇异常则暂停打印并关闭热端加热
gcode: 
    # If not already paused
    {% if printer['pause_resume'].is_paused|int == 0 %}
        M117 !!FAN STOPPAGE!!
        M118 FAN STOPPAGE DETECTED. PAUSING...
        PAUSE
        # Turn off the hotend. 
        # !! Don't forget to turn your hotend back on before resume. !!
        # -- If using this guide's pause/resume macros (in useful_macros.html), the hotend will automatically reheat on resume
        # -- (as long as the hotend is not turned off BEFORE pause is called)
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    {% endif %}

### 以上代码用于检测可测速风扇的运行状态，风扇异常则暂停打印并关闭热端加热 ###


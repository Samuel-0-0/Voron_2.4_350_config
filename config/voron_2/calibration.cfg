################################################################################
# VORON 2.4  350mm  打印机配置文件
################################################################################
# COPYRIGHT © 2021 - 2025  Samuel Wang
# 本文件可以根据GNU GPLv3许可协议进行分发
# This file may be distributed under the terms of the GNU GPLv3 license
################################################################################
# Discord: Samuel-0-0#0576    Github: Samuel-0-0    Bilibili: Samuel-0_0
################################################################################
# 文件用途：调试宏脚本
################################################################################
# 根据你的设置编辑此文件
################################################################################

## PID加热棒测试
[gcode_macro PID_HOTEND]
description: PID加热棒测试。使用方法：PID_HOTEND
gcode:
  M106 S64                                     #模型风扇转速25%
  #M106 S256                                    #模型风扇转速100%
  PID_CALIBRATE HEATER=extruder TARGET=280     #目标温度

## PID热床测试
[gcode_macro PID_BED]
description: PID热床测试。使用方法：PID_BED
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=110   #目标温度

## 模拟测试热端能承受的最大流量
[gcode_macro HOTEND_TEST]
description: 模拟测试热端能承受的流量
    使用方法 HOTEND_TEST SPEED=300 FLOW_RATIO=0.92 LONG=200
variable_line_height : 0.2              # 层高
variable_line_width : 0.4               # 线宽
variable_filament_diameter: 1.75        # 耗材直径
variable_pi: 3.14                       # π值
gcode:
  {% set height = printer['gcode_macro HOTEND_TEST'].line_height|float %}
  {% set width = printer['gcode_macro HOTEND_TEST'].line_width|float %}
  {% set diameter = printer['gcode_macro HOTEND_TEST'].filament_diameter|float %}
  {% set pi = printer['gcode_macro HOTEND_TEST'].pi|float %}
  {% set speed = params.SPEED|default(300)|int %}                # 模拟打印速度
  {% set flow_ratio = params.FLOW_RATIO|default(0.92)|float %}     # 切片软件中耗材的流量比例
  {% set long = params.LONG|default(200)|int %}                  # 耗材消耗长度
  {% set F = (((height/2)*(height/2)*pi+(width-height)*height)*speed)*
      flow_ratio/(pi*(diameter/2)*(diameter/2))*60|float %}        # 挤出机F值
  {% set FLOW = ((height/2)*(height/2)*pi+(width-height)*height)*speed|float %}   # 根据s3d算法算得的流量值
  { action_respond_info(
      '开始模拟%s打印速度，消耗耗材%s毫米，挤出机使用的F值是%s，预估流量%s' 
      % (speed, long, F|int, FLOW|int) ) }
  M83  # 挤出机使用相对坐标模式
  G1 E{long} F{F}
  { action_respond_info(
      '请注意听挤出机齿轮是否出现跳齿的声音，'  
      '如果一切正常，请记下流量值，然后乘以0.8的安全系数，'  
      '将结果填入切片软件耗材的最大体积速度项中'  ) }

## 电机与原点位置说明
# ----------------
# |Z1          Z2|
# |  XB-----YA   |
# |  |       |   |
# |  |       |   |
# |  0--------   |
# |Z           Z3|
# -----front------

## 测试电机是否正常运转
[gcode_macro TEST_STEPPER]
description: 测试电机是否正常运转及运转方向是否正常。使用方法：TEST_STEPPER STEPPER=x
gcode:
  {% set stepper = params.STEPPER|default(轴名称)|lower %}
  M118 即将测试{stepper}轴电机运转情况
  {% if stepper in ["x","y"] %}
    M118 请从{stepper}传动轮正面观察并确认，是否先顺时针后逆时针摆动！
  {% endif %}
  {% if stepper in ["z","z1","z2","z3"] %}
    M118 请从{stepper}轴滑块固定处观察并确认，是否先上后下移动！
  {% endif %}
  STEPPER_BUZZ STEPPER=stepper_{stepper}
  M118 {stepper}轴电机运转测试完毕！
  M118 如果步进电机完全不动，则验证步进电机的“enable_pin”和“step_pin”设置。
  M118 如果步进电机移动但没有返回其原始位置，则验证“dir_pin”设置。
  M118 如果步进电机以错误的方向振动，则通常表示轴的“dir_pin”需要反转。
  M118 可以通过在打印机配置文件中的“dir_pin”中添加“！”来完成（如果已经存在，则删除它）。
  M118 如果电机移动明显大于或小于一毫米，则验证rotation_distance设置。

## 一次性测试电机是否正常运转
[gcode_macro TEST_ALL_STEPPERS]
description: 一次性测试电机是否正常运转。使用方法：TEST_ALL_STEPPERS
gcode:    
  M118 请从X传动轮正上方观察并确认，是否先顺时针后逆时针摆动
  G4 S3
  STEPPER_BUZZ STEPPER=stepper_x            #测试X电机
  M118 请从Y传动轮正上方观察并确认，是否先顺时针后逆时针摆动
  G4 S3                                     #暂停3秒
  STEPPER_BUZZ STEPPER=stepper_y            #测试Y电机
  M118 请从Z轴滑块固定处观察并确认，是否先上后下移动
  G4 S3                                     #暂停3秒
  STEPPER_BUZZ STEPPER=stepper_z            #测试Z电机
  M118 请从Z1轴滑块固定处观察并确认，是否先上后下移动
  G4 S3                                     #暂停3秒
  STEPPER_BUZZ STEPPER=stepper_z1           #测试Z1电机
  M118 请从Z2轴滑块固定处观察并确认，是否先上后下移动
  G4 S3                                     #暂停3秒
  STEPPER_BUZZ STEPPER=stepper_z2           #测试Z2电机
  M118 请从Z3轴滑块固定处观察并确认，是否先上后下移动
  G4 S3                                     #暂停3秒
  STEPPER_BUZZ STEPPER=stepper_z3           #测试Z3电机

## 测试PROBE稳定性
[gcode_macro PROBE_ACCURACY_TEST]
description: 测试PROBE稳定性，首次安装的TAP，PROBE_SAMPLES输入100，再次测试不需要输入值
gcode:
  {% set probe_speed = params.PROBE_SPEED|default(5)|float %}
  {% set probe_samples = params.PROBE_SAMPLES|default(10)|int %}
  G28
  PROBE_ACCURACY PROBE_SPEED={probe_speed} SAMPLES={probe_samples}

## 手动Z偏移调整
[gcode_macro PROBE_CALIBRATE]
description: 手动Z偏移调整
rename_existing: PROBE_CALIBRATE_BASE
gcode:
  QGL
  PROBE_CALIBRATE_BASE

## 设置XY电机运转电流
[gcode_macro SET_XY_STEPPERS_CURRENT]
description: 设置XY电机运转电流。使用方法：SET_XY_STEPPERS_CURRENT CURRENT=0.8
gcode:
  {% set current = params.CURRENT|default(输入电机电流)|float %}
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={current}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={current}

## 设置Z电机运转电流
[gcode_macro SET_Z_STEPPERS_CURRENT]
description: 设置Z电机运转电流。使用方法：SET_Z_STEPPERS_CURRENT CURRENT=0.8
gcode:
  {% set current = params.CURRENT|default(输入电机电流)|float %}
  SET_TMC_CURRENT STEPPER=stepper_z CURRENT={current}
  SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={current}
  SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={current}
  SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={current}

## 自动进行速度与加速度测试
# https://github.com/Anonoei/klipper_auto_speed
[auto_speed]

## 速度与丢步测试
# https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/main/macros/TEST_SPEED.cfg
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
description: 速度测试，使用方法 TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

## 在终端打印出Klipper变量
[gcode_macro DUMP_VARIABLES]
description: 在终端打印出Klipper变量，使用方法:[DUMP_VARIABLES NAME=stepper VALUE=extruder]，NAME表示变量名称包含的关键词，VALUE表示变量内容包含的关键，2个参数都是可选参数。
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

## 将单个变量的值和类型返回到终端。
[gcode_macro GET_VARIABLE]
description: 将单个变量的值和类型返回到终端。使用方法:[GET_VARIABLE NAME=toolhead]，NAME指定要检索的变量的名称，必填。
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}

[gcode_macro DUMP_WARNINGS]
description: 显示klipper配置警告信息
gcode:
   {% set parameters = ["printer.configfile.warnings:"] %}
   {% for name1 in printer.configfile.warnings %}
       {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (name1.type, name1.section, name1.option, name1.message)) %}
   {% endfor %}
   {action_respond_info(parameters|join("\n"))}

################################################################################
# VORON 2.4  350mm  打印机配置文件
################################################################################
# COPYRIGHT © 2021 - 2025  Samuel Wang
# 本文件可以根据GNU GPLv3许可协议进行分发
# This file may be distributed under the terms of the GNU GPLv3 license
################################################################################
# Discord: Samuel-0-0#0576    Github: Samuel-0-0    Bilibili: Samuel-0_0
################################################################################
# 文件用途：暂停打印、恢复打印、取消打印相关宏
################################################################################
# 根据你的设置编辑此文件
################################################################################

################################################################################
# 修改自mainsail-config
# Copyright (C) 2022 Alex Zellner <alexander.zellner@googlemail.com>
################################################################################

## 客户端变量宏
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True  # 是否使用自定义停靠坐标 [True/False]
variable_custom_park_x    : 20.0  # 自定义x坐标；值必须在X最小和最大范围内
variable_custom_park_y    : 20.0  # 自定义y坐标；值必须在Y最小和最大范围内
variable_custom_park_dz   : 2.0   # 自定义dz值；工具头在移动到停靠位置时提升的高度（单位：mm）
variable_retract          : 1.0   # PAUSE时的回抽值
variable_cancel_retract   : 5.0   # CANCEL_PRINT时的回抽值
variable_speed_retract    : 35.0  # 回抽速度（单位：mm/s）
variable_unretract        : 1.0   # RESUME时的回推值
variable_speed_unretract  : 35.0  # 回推速度（单位：mm/s）
variable_speed_hop        : 15.0  # Z轴移动速度（单位：mm/s）
variable_speed_move       : 100.0 # 移动速度（单位：mm/s）
variable_park_at_cancel   : True  # 执行CANCEL_PRINT时是否允许将工具头停靠 [True/False]
variable_park_at_cancel_x : 330.0 # CANCEL_PRINT时的不同停靠位置[None/位置值作为浮动值]；park_at_cancel 必须为 True
variable_park_at_cancel_y : 330.0 # CANCEL_PRINT时的不同停靠位置[None/位置值作为浮动值]；park_at_cancel 必须为 True
## !!! 如果设置use_fw_retract: True，必须在配置中定义 [firmware_retraction] !!!
variable_use_fw_retract   : False # 是否使用固件回抽代替手动版本 [True/False]
variable_idle_timeout     : 3600  # 空闲超时的时间（单位：秒）。值为0表示不设置或恢复原值
variable_runout_sensor    : ""    # 如果定义了传感器，则在没有检测到耗材时取消RESUME的执行。
##                                  指定runout传感器的配置名称，例如"filament_switch_sensor runout"。提示：使用与配置中相同的名称
## !!! 自定义宏，请小心使用，并检查相应宏的章节。
## 这些宏用于像设置状态LED这样的简单操作。请确保您的宏不会与基本宏功能冲突。
## 仅支持单行命令，如果您需要多个命令，请创建宏。
variable_user_pause_macro : ""    # 在Klipper基本暂停（PAUSE_BASE）功能后执行的宏
variable_user_resume_macro: ""    # 在Klipper基本恢复（RESUME_BASE）功能前执行的宏
variable_user_cancel_macro: ""    # 在Klipper基本取消（CANCEL_PRINT_BASE）功能前执行的宏
gcode:

[gcode_macro CANCEL_PRINT]
description: 取消当前正在运行的打印任务
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### 获取用户参数或使用默认值 #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### 定义停靠位置开始 #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### 定义停靠位置结束 #####
  # 恢复空闲超时时间（如果需要）
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # 清除pause_next_layer和pause_at_layer为下次打印做好准备
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE
  {action_respond_info("已为您取消打印")}

[gcode_macro PAUSE]
description: 暂停当前正在运行的打印任务
rename_existing: PAUSE_BASE
gcode:
  ##### 获取用户参数或使用默认值 ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### 定义结束 #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # 设置新的idle_timeout值
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}
  {action_respond_info("已为您暂停打印")}

[gcode_macro RESUME]
description: 恢复当前正在运行的打印任务
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### 获取用户参数或使用默认值 #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""       # 无耗材
                    else True if not printer[client.runout_sensor].enabled    # 传感器被禁用
                    else printer[client.runout_sensor].filament_detected %}   # 传感器状态
  {% set can_extrude = True if printer.toolhead.extruder == ''                # 配置中未定义挤出机
                    else printer[printer.toolhead.extruder].can_extrude %}    # 当前挤出机状态
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### 定义结束 #####
  #### 打印机处于超时空闲状态 ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # 我们需要使用Unicode(\u00B0)表示°，因为在Python 2环境下会抛出错误
      RESPOND TYPE=echo MSG='{"恢复 \"%s\" 温度为 %3.1f\u00B0C，这可能需要一些时间" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"恢复打印中止！！！ \"%s\" 不够热，请重新加热后按[恢复打印]" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" 不够热，请重新加热并按[恢复打印]" % printer.toolhead.extruder) %}
    {% endif %}
  #### 打印机处于常规暂停状态 ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"恢复打印中止！！！ \"%s\" 不够热，请重新加热后按[恢复打印]" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" 不够热，请重新加热后按[恢复打印]" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # 恢复空闲超时设置
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"恢复打印中止！！！ \"%s\" 检测不到耗材，请加载耗材后按[恢复打印]" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" 检测不到耗材，请加载耗材后按[恢复打印]" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### 如果恢复被中止，生成用户信息框 #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin 恢复打印中止！！！"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button 好的|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}
  {action_respond_info("已为您恢复打印")}

# 使用方法: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: 当达到下一层时启用暂停
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# 使用方法: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: 当达到指定的层时启用/禁用暂停
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# 使用方法: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: 覆写以启用 pause_next_layer 和 pause_at_layer 功能
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, 由 pause_next_layer 强制" % pause_next_layer.call}'
    {pause_next_layer.call} # 执行给定的G-code暂停命令，应该是M600或PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, 由 pause_at_layer [%d] 强制" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} # 执行给定的G-code暂停命令，应该是M600或PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}

##### 宏内部使用 #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: 辅助宏：在PAUSE和CANCEL_PRINT时停放工具头
gcode:
  ##### 获取用户参数或使用默认值 #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = client.custom_park_y|default(0.0) %}
  {% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(15) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### 获取配置和工具头值 #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %}  # 高度是工具头能达到的最大和最小值（用于delta）
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### 定义停放位置 #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### 定义结束 #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='打印机未归零'
  {% endif %}
  
[gcode_macro _CLIENT_EXTRUDE]
description: 如果挤出机温度足够高，则挤出
gcode:
  ##### 获取用户参数或使用默认值 #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### 定义结束 #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed|float|abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='{"\"%s\" 温度不够" % printer.toolhead.extruder}'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: 如果挤出机温度足够高，则回抽
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_retract)|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

# https://github.com/mainsail-crew/mainsail-config/pull/39
[gcode_macro _CLIENT_LINEAR_MOVE]
description: 线性移动（让电机更安静）并保存和恢复G-code状态
gcode:
  {% set x_move = "X" ~ params.X if params.X is defined else "" %}
  {% set y_move = "Y" ~ params.Y if params.Y is defined else "" %}
  {% set z_move = "Z" ~ params.Z if params.Z is defined else "" %}
  {% set e_move = "E" ~ params.E if params.E is defined else "" %}
  {% set rate = "F" ~ params.F if params.F is defined else "" %}
  {% set ABSOLUTE = params.ABSOLUTE | default(0) | int != 0 %}
  {% set ABSOLUTE_E = params.ABSOLUTE_E | default(0) | int != 0 %}
  SAVE_GCODE_STATE NAME=_client_movement
  {% if x_move or y_move or z_move %}
    G9{ 0 if ABSOLUTE else 1 }
  {% endif %}
  {% if e_move %}
    M8{ 2 if ABSOLUTE_E else 3 }
  {% endif %}
  G1 { x_move } { y_move } { z_move } { e_move } { rate }
  RESTORE_GCODE_STATE NAME=_client_movement

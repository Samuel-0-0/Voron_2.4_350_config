################################################################################
# VORON 2.4  350mm  打印机配置文件
################################################################################
# COPYRIGHT © 2021 - 2025  Samuel Wang
# 本文件可以根据GNU GPLv3许可协议进行分发
# This file may be distributed under the terms of the GNU GPLv3 license
################################################################################
# Discord: Samuel-0-0#0576    Github: Samuel-0-0    Bilibili: Samuel-0_0
################################################################################
# 文件用途：灯光配置
################################################################################
# 根据你的设置编辑此文件
################################################################################

##################################
## KNOMI屏幕
[gcode_macro _KNOMI_STATUS]
variable_use_knomi: True
variable_homing: False
variable_probing: False
variable_qgling: False
variable_heating_nozzle: False
variable_heating_bed: False
gcode:

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BTT_BED_MESH_CALIBRATE
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=True
  BTT_BED_MESH_CALIBRATE {rawparams}
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=False

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: BTT_QUAD_GANTRY_LEVEL
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=True
  BTT_QUAD_GANTRY_LEVEL {rawparams}
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=False
## KNOMI屏幕
##################################

## COB灯带1米剪开分3条
[led caselight]
white_pin: PB11
initial_WHITE: 0.2               # 系统初始化后的亮度
#hardware_pwm: true
cycle_time: 0.00002              # 频率 1/0.00002=50KHz

## 检查顶部照明是否开启，如果没开启则开启
[gcode_macro _CASELIGHT_ON]
description: 开启仓内照明灯
gcode:
    SET_LED LED=caselight WHITE=0.2
    SET_NOZZLE_LEDS_ON

## 延迟执行关闭顶部照明灯
[gcode_macro _CASELIGHT_OFF]
description: 关闭仓内照明灯
gcode:
    SET_LED LED=caselight WHITE=0.0
    SET_NOZZLE_LEDS_OFF

## 延迟关灯
[delayed_gcode CASELIGHT_DELAY_OFF]
gcode:
    _CASELIGHT_OFF

[gcode_macro CASELIGHT]
description: Toggle light
gcode:
    {% if printer['led caselight'].color_data[0][3] == 0 %}
        _CASELIGHT_ON
    {% else %}
        _CASELIGHT_OFF
    {% endif %}

## RGB灯带1米剪开分3条，每条19颗SK6812 RGBW灯珠
#[neopixel light]
#pin: PB0                     # 控制引脚
#chain_count: 57              # 灯珠数量
#color_order: GRBW            # 颜色编码类型
#initial_RED: 0.0             # 红色初始化
#initial_GREEN: 0.0           # 绿色初始化
#initial_BLUE: 0.0            # 蓝色初始化
#initial_WHITE: 0.2           # 白色初始化

#[gcode_macro LIGHT_ON]
#gcode: 
#  LIGHT_WHITE

#[gcode_macro LIGHT_OFF]
#gcode:
#    SET_LED LED=light RED=0.0 GREEN=0.0 BLUE=0.0 WHITE=0.0 TRANSMIT=1

#[gcode_macro LIGHT_RED]
#gcode:
#    SET_LED LED=light RED=1.0 GREEN=0.0 BLUE=0.0 WHITE=0.0 TRANSMIT=1

#[gcode_macro LIGHT_GREEN]
#gcode:
#    SET_LED LED=light RED=0.0 GREEN=1.0 BLUE=0.0 WHITE=0.0 TRANSMIT=1

#[gcode_macro LIGHT_BLUE]
#gcode:
#    SET_LED LED=light RED=0.0 GREEN=0.0 BLUE=1.0 WHITE=0.0 TRANSMIT=1

#[gcode_macro LIGHT_WHITE]
#gcode:
#    SET_LED LED=light RED=0.0 GREEN=0.0 BLUE=0.0 WHITE=0.9 TRANSMIT=1
    
#[gcode_macro LIGHT_YELLOW]
#gcode:
#    SET_LED LED=light RED=1.0 GREEN=1.0 BLUE=0 WHITE=0.0 TRANSMIT=1

#[gcode_macro LIGHT_FLICKER]
#gcode:
#    {% set LEDTimes = [10, 20, 20, 240, 20, 40, 20, 100, 20, 20, 20, 260, 80, 20, 240, 60, 160, 20, 240, 20, 1000, 20, 20, 40, 100, 20, 274, 340, 860, 20, 1400, 20, 60, 20] %}
#    {% set RGB_Red = 0.2 %}
#    {% set RGB_Green = 0.2 %}
#    {% set RGB_Blue = 0.2 %}
#    {% set RGB_White = 0.0 %}
#    {% set RGB_Strip = "light" %}

#    {% for toggletime in LEDTimes %}
#      {% set ledTime = toggletime|string %}
#      {% set loopCount = loop.index %}

#      {% if loopCount is divisibleby 2 %} # If the loop index is divisible by 2 (firtst index is NOT so the LEd should turn ON)
#        SET_LED LED={RGB_Strip} RED={RGB_Red} GREEN={RGB_Green} BLUE={RGB_Blue} WHITE={RGB_White}
#        G4 P{ledTime|int}
#      {% else %}
#        SET_LED LED={RGB_Strip}
#        G4 P{ledTime|int}
#      {% endif %}

#    {% endfor %}

#    {% for i in range(1,9) %}  # loops 1,2,3,4,5
#      {action_respond_info(i|string)}
#      SET_LED LED={RGB_Strip} RED={RGB_Red+(i/10)} GREEN={RGB_Green+(i/10)} BLUE={RGB_Blue+(i/10)} WHITE={RGB_White} INDEX=1
#      G4 P200
#    {% endfor %}


#####################################################################
# StealthBurner 灯光
#####################################################################

# 用于设置 Voron StealthBurner 工具头上的状态 LED（或任何可寻址 LED，如 Neopixel 类型 LED）的宏。
#
# 您需要配置一个 Neopixel（或其他地址可寻址的 LED，如 DotStar）。有关配置详细信息，请参见
# https://www.klipper3d.org/Config_Reference.html#neopixel。

#####################################
#             使用说明               #
#####################################
# 如何使用这些内容：
#
#     1.  将此 .cfg 文件复制到 Klipper 配置目录中，然后在 printer.cfg 顶部添加 [include stealthburner_leds.cfg]
#         来注册 LED 和宏到 Klipper。
#     2.  通过编辑下面的 [neopixel sb_leds] 来定义您的 LED，输入控制板的数据引脚和颜色顺序。
#
#           注意：RGB 和 RGBW 是不同的，必须明确地定义。RGB 和 RGBW 不能在同一链条中混用，
#                 需要为其提供单独的数据线才能正常工作。
#
#                 RGBW LED 芯片上会有一个明显的黄色荧光部分。如果您的 LED 没有这个黄色部分，
#                 那么它就是 RGB LED。
#
#     3.  保存配置并重启 Klipper。
#
#           注意：我们将红色（RED）和蓝色（BLUE）设置为 1.0，以便用户和支持者更容易检测到
#                 配置错误或接线错误。默认的颜色格式适用于具有独立白色 LED 的 Neopixels。
#                 启动时，所有三盏 SB LED 应该亮起。
#
#                 如果您的 LED 上出现随机颜色，请将 color_order 更改为 GRB 并重启。然后
#                 在下段建议的 color_order 中省略 W。
#
#                 如果显示品红色（MAGENTA），则您的颜色顺序是正确的。如果显示青色（CYAN），
#                 需要使用 RGBW。如果显示黄色（YELLOW），则需要使用 BRGW（请注意，BRG
#                 仅在最新版本的 Klipper 中支持）。
#
#     4.  一旦确认 LED 配置正确，您需要决定在何处调用这些宏... 也就是将它们添加到现有的 G-code 宏中。
#         除非您将 STATUS_????? 宏添加到现有的 G-code 宏中，否则什么都不会发生。
#
#           例如：将 STATUS_LEVELING 添加到 QGL G-code 宏的开始位置，然后将 STATUS_READY
#                    添加到结束位置，以将 logo LED 和喷嘴 LED 恢复为 `ready` 状态。
#
#           例如：将 STATUS_CLEANING 添加到喷嘴清洁宏的开始位置，然后将 STATUS_READY
#                    添加到结束位置，以将 LED 恢复为 `ready` 状态。
#
#     5.  如果需要，您可以随意更改每个宏的颜色，或创建新的宏。下面提供的宏只是示例，
#         展示了可能的功能。如果您想尝试一些更复杂的动画，您很可能需要使用 WLED 和 Moonraker，
#         以及一个小型微控制器（有关帮助，请参见 Discord 上的 stealthburner_beta 频道中的 LED 主题）。
#
#####################################
#         使用说明结束               #
#####################################

[neopixel sb_leds]
pin: tool:TOOL_RGB             # 控制引脚。此参数必须提供
chain_count: 3                 # "串联"到引脚的数量。默认值为 1（表示只有一个连接到引脚）
color_order: GRBW              # 设置LED的像素顺序。选项有 GRB、RGB、GRBW 或 RGBW。默认值为 GRB。
# 设置 Neopixel 的初始 LED 颜色。每个值应该在 0.0 到 1.0 之间。WHITE 选项仅适用于 RGBW LED
# 默认情况下，每个颜色的值为 0
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0
initial_WHITE: 0.1

# 以下是可用的状态宏（这些可以放入您的宏中）：
#
#    STATUS_READY
#    STATUS_OFF
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
#
# 以及一些用于基本控制的宏：
#
#    SET_NOZZLE_LEDS_ON
#    SET_LOGO_LEDS_OFF
#    SET_NOZZLE_LEDS_OFF
#
# 感谢 Voron Discord 用户 wile.e、Tetsunosuke 和 etherwalker 的贡献

[gcode_macro _sb_vars]
# StealthBurner状态LED的用户设置。您可以在这里更改状态颜色和LED配置，包括logo和喷嘴的颜色设置
variable_colors: {
        'logo': {                                                               # logo状态颜色
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},                   # 忙碌状态
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},              # 清洁状态
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},          # 校准Z状态
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},               # 加热状态
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},                 # 归零状态
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},               # 层高校准状态
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},                # 网格状态
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},                    # 关闭状态
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},               # 打印状态
            'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},             # 待机状态
        },
        'nozzle': {                                                             # 喷嘴状态颜色
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w': 0.0},               # 喷嘴加热状态
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},                    # 喷嘴关闭状态
            'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w': 1.0},                     # 喷嘴开启状态
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w': 0.0},                # 喷嘴待机状态
        },
        'thermal': {                                                            # 热床状态颜色
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},                    # 热床加热状态
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}                    # 热床冷却状态
        }
    }
variable_logo_led_name:         "sb_leds"                # 包含logo LED的可寻址LED链的名称
variable_logo_idx:              "1"                      # logo中LED的索引，多个索引用逗号分隔
variable_nozzle_led_name:       "sb_leds"                # 包含喷嘴LED的可寻址LED链的名称。通常与logo使用相同的LED链
variable_nozzle_idx:            "2,3"                    # 喷嘴LED的索引，多个索引用逗号分隔
gcode:                                                   # 这一部分是必需的，请勿删除

[gcode_macro _set_sb_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}

    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode:
    set_logo_leds_off transmit=0
    set_nozzle_leds_off

[gcode_macro status_ready]
gcode:
    _set_sb_leds_by_name leds="logo" color="standby" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode:
    _set_sb_leds_by_name leds="logo" color="busy" transmit=0
    set_nozzle_leds_on

[gcode_macro status_heating]
gcode:
    _set_sb_leds_by_name leds="logo" color="heating" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode:
    _set_sb_leds_by_name leds="logo" color="leveling" transmit=0
    set_nozzle_leds_on

[gcode_macro status_homing]
gcode:
    _set_sb_leds_by_name leds="logo" color="homing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode:
    _set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
    set_nozzle_leds_on

[gcode_macro status_meshing]
gcode:
    _set_sb_leds_by_name leds="logo" color="meshing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode:
    _set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
    set_nozzle_leds_on

[gcode_macro status_printing]
gcode:
    _set_sb_leds_by_name leds="logo" color="printing" transmit=0
    set_nozzle_leds_on

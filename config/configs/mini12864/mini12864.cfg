#####################################################################
# Mini12864屏幕
#####################################################################

## 在屏幕上面显示信息，配置[display]后，默认会自动加载
#[display_status]
#显示信息： M117 <message>
#设置构建百分比：M73 P<percent>

## Mini12864显示屏的设置
[display]
lcd_type: uc1701                 # 显示屏驱动类型
cs_pin: PE9                      # 显示屏片选CS引脚
a0_pin: PE10                     # 显示屏数据A0/RS引脚
rst_pin: PE12                    # 显示屏复位RST脚
encoder_pins: ^PB2, ^PB1         # 旋转编码器（旋钮开关）引脚
click_pin: ^!PE7                 # 旋转编码器（旋钮开关）确认按键的引脚
contrast: 63                     # 对比度
#spi_bus: spi1                   # SPI总线设置
spi_software_sclk_pin: PA5       # 对应屏幕SCL
spi_software_mosi_pin: PA7       # 对应屏幕SDA
spi_software_miso_pin: PA6
menu_timeout: 30                 # 菜单超时时间
display_group: __voron_display
# Use either:
# __voron_main : that is a complete menu you need to [include display_menu.cfg] here.
# __voron_empty: only activates the backlight of the display for 10 sek if you 
#                hit the knob with no other function. In this case you can comment out
#                [include display_menu.cfg]
# remove menu_root: ... if you want to use the stock menu
menu_root: __voron_main

# 菜单目录
[include display_menu.cfg]

# 蜂鸣器
[include beeper.cfg]

# Display menu definitions
[menu __voron_empty]
type: command
name: Main
gcode: {menu.exit()}

[neopixel btt_mini12864]
pin: PE13                           # 显示屏背光灯控制引脚
chain_count: 3                      # 灯珠数量
initial_RED: 0.2                    # 红色LED灯亮度控制（范围：0-1）
initial_GREEN: 0.2                  # 绿色LED灯亮度控制（范围：0-1）
initial_BLUE: 0.2                   # 蓝色LED灯亮度控制（范围：0-1）
color_order: RGB                    # 像素顺序，可选 GRB, RGB, GRBW, RGBW

# this solution is purly a workaround to switch on the display
# when pressing the menu button. It has the following limitaions:
#   - As it is handled as normal gcode it can take a few sec to
#     execute the gcode and light up
#   - At blocking gcodes e.g M190 it will executed after that finished
#   - You need to add 'UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10' 
#     manual to each menu item you execute with the menu.exit methode 
# add this to use the click pin also to switch on display
[duplicate_pin_override]
pins: PE7

[gcode_button click_button_display]
pin: ^!PE7
press_gcode: {% if not printer.menu.running %} _DISPLAY_ON {% endif %}
release_gcode: {% if not printer.menu.running %} UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10 {% endif %}


# Glyph definition
[display_glyph chamber]
data:
    0000000000000000
    1111111111111111
    1000010000100001
    1000010000100001
    1000011111100001
    1000000000000001
    1000000000000001
    1000001111000001
    1011101001011101
    1000001111000001
    1000000110000001
    1000000000000001
    1011111111111101
    1000100000010001
    1111111111111111
    0000000000000000
    
[display_glyph voron]
data:
    1111111001111111
    1111100000011111
    1111000000001111
    1100000000000011
    1000001100110001
    1000011001100001
    1000110011000001
    1001100110000001
    1000000110011001
    1000001100110001
    1000011001100001
    1000110011000001
    1110000000000111
    1111000000001111
    1111100000011111
    1111111001111111

[display_glyph voroninv]
data:
    0000001110000000
    0000111111100000
    0001111111110000
    0111111111111100
    1111100111001110
    1111001110011110
    1110011100111110
    1100111001111110
    1111110011100110
    1111100111001110
    1111001110011110
    1110011100111110
    0111111111111100
    0001111111110000
    0000111111100000
    0000001110000000
    
# Display Data definition
[display_template _vheater_temperature]
param_heater: "extruder"
text:
  {% if param_heater in printer %}
    # Show glyph
    {% if param_heater == "heater_bed" %}
      {% if printer[param_heater].target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (printer[param_heater].temperature,) }
    # Optionally show target
    {% if printer[param_heater].target and (printer[param_heater].temperature - printer[param_heater].target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (printer[param_heater].target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_data __voron_display extruder]
position: 0, 0
text: { render("_vheater_temperature", param_heater="extruder") }

[display_data __voron_display fan]
position: 0, 10
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_data __voron_display bed]
position: 1, 0
text: { render("_vheater_temperature", param_heater="heater_bed") }

[display_data __voron_display progress_text]
position: 1, 10
text:
  {% set progress = printer.virtual_sdcard.progress %}
  { "{:^6.0%}".format(progress) }
  
[display_data __voron_display progress_text2]
position: 1, 10
text:
  {% set progress = printer.virtual_sdcard.progress %}
  { draw_progress_bar(1, 10, 6, progress) }

[display_data __voron_display chamber]
position: 2, 0
text:
        ~chamber~
        { "%3.0f" % printer["temperature_sensor chamber"].temperature }
        ~degrees~

[display_data __voron_display printing_time]
position: 2, 10
text:
  {% set ptime = printer.print_stats.total_duration %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

[display_data __voron_display print_status]
position: 3, 0
text: 
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time|int != 0 %}
    {% set pos = printer.motion_report.live_position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    { "Samuel " }
      ~voroninv~
  {% endif %}

# Macro definition
    
[delayed_gcode _DISPLAY_INIT]
gcode:
    _LCD_KNOB COLOR=GREEN SYNC=1
    UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10

[gcode_macro _LCD_KNOB]
description: Helper: Set LCD Knob color
variable_knob: {'act'    : {'pri':{'R':0.0, 'G':0.3, 'B':0.0},
                            'sec':{'R':0.0, 'G':0.0, 'B':0.0}},
                'restore': {'pri':{'R':0.0, 'G':0.0, 'B':0.0},
                            'sec':{'R':0.0, 'G':0.0, 'B':0.0}},
                'time'   : 0,
                'sync'   : 0}
variable_select: 3  ; used to select what neopixel is active while blinking
gcode:
  ##### color definition #####
  {% set color_dic = {'OFF'  :{'R':0.0, 'G':0.0, 'B':0.0},
                      'GREEN':{'R':0.0, 'G':0.3, 'B':0.0},
                      'RED'  :{'R':0.5, 'G':0.0, 'B':0.0},
                      'BLUE' :{'R':0.0, 'G':0.0, 'B':0.5}} %}
  ##### get PARAMETERS or use defaults values #####
  {% set _dummy = knob.update({'time': params.BLINK|default(0)|float}) %}
  {% set _dummy = knob.update({'sync': params.SYNC|default(0)|int}) %}
  {% if 'COLOR' in params|upper %}
    {% set color = params.COLOR|upper %}
    {% set _dummy = knob.restore.update({'pri':knob.act.pri}) %}
    {% if color in color_dic %}
      {% set _dummy = knob.act.update({'pri':color_dic[color]}) %}
    {% else %}
      {action_respond_info("LCD KNOB COLOR %s is not defined used default: GREEN" % color)}
      {% set _dummy = knob.act.update({'pri':color_dic.GREEN}) %}
    {% endif %}
  {% else %}
    {% set _dummy = knob.act.update({'pri':knob.restore.pri}) %}
  {% endif %}
  ##### store new variable values #####
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=knob VALUE="{knob}"
  ##### update to new color and start or stop blinking #####
  SET_LED LED=btt_mini12864 RED={knob.act.pri.R} GREEN={knob.act.pri.G}  BLUE={knob.act.pri.B} INDEX=1 TRANSMIT=0 SYNC={knob.sync}
  SET_LED LED=btt_mini12864 RED={knob.act.pri.R} GREEN={knob.act.pri.G}  BLUE={knob.act.pri.B} INDEX=2 TRANSMIT=1 SYNC={knob.sync}
  UPDATE_DELAYED_GCODE ID=_BLINK_DELAY DURATION={knob.time}

[delayed_gcode _BLINK_DELAY]
gcode:
  {% set knob = printer["gcode_macro _LCD_KNOB"].knob %}
  {% set i = [2,3] if printer["gcode_macro _LCD_KNOB"].select|int == 1 else [3,2] %}
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=select VALUE={(printer["gcode_macro _LCD_KNOB"].select|int * -1)}
  SET_LED LED=btt_mini12864 RED={knob.act.pri.R} GREEN={knob.act.pri.G} BLUE={knob.act.pri.B} INDEX={i[0]} TRANSMIT=0 SYNC={knob.sync}
  SET_LED LED=btt_mini12864 RED={knob.act.sec.R} GREEN={knob.act.sec.G} BLUE={knob.act.sec.B} INDEX={i[1]} TRANSMIT=1 SYNC={knob.sync}
  UPDATE_DELAYED_GCODE ID=_BLINK_DELAY DURATION={knob.time}

[gcode_macro DISPLAY]
description: Toggle Display backlight
variable_state: 'on'
gcode:
  {% if state == 'on' %} _DISPLAY_OFF {% else %} _DISPLAY_ON {% endif %}
  _DISPLAY_STATE
    
[gcode_macro _DISPLAY_STATE]
description: Helper: Print display backlight state
gcode: {action_respond_info("LCD display %s" % (printer["gcode_macro DISPLAY"].state))}

[gcode_macro _DISPLAY_OFF]
description: Helper: Display backlight off
gcode:
    SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"off"'
    SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=3 TRANSMIT=1 SYNC=0

[gcode_macro _DISPLAY_ON]
description: Helper: Display backlight on
gcode:
    SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"on"'
    SET_LED LED=btt_mini12864 RED=0.8 GREEN=0.8 BLUE=1.0 INDEX=3 TRANSMIT=1 SYNC=0

[delayed_gcode _DELAY_DISPLAY_OFF]
gcode: _DISPLAY_OFF

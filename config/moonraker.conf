########################################################################################################################
# VORON 2.4  350mm  打印机配置文件
#
# 版权所有 (C) 2025  Samuel Wang    Discord: Samuel-0-0#0576    Github: Samuel-0-0    Bilibili: Samuel-0_0
#
# 本文件可以根据GNU GPLv3许可协议进行分发
# This file may be distributed under the terms of the GNU GPLv3 license
#
#
# 根据你的设置编辑此文件
#
# 目标：Moonraker服务配置
#
[server]
# 绑定HTTP服务器的主机地址。默认绑定到所有IPV4接口
#host: 0.0.0.0                                         
# HTTP服务将侦听的端口。默认7125
#port: 7125                                            
# 用于侦听SSL（HTTPS）连接的端口。HTTPS服务将仅在有证书和密钥后才会启用。
# 密钥moonraker.cert和moonraker.key存放在 ~/printer_data/certs/。默认值为7130
#ssl_port: 7130                                        
# 用于与Klippy通信的Unix域套接字的地址。默认/tmp/klippy_uds
#klippy_uds_address: /tmp/klippy_uds                   
# 允许上传的最大文件大小（MB）。默认1024MB
#max_upload_size: 1024
# 同时打开的websocket连接最大值，默认50
#max_websocket_connections:

[file_manager]
# 将上传的gcode文件加入任务列表，如果要使用自动打开电源，需要开启此配置。默认False
queue_gcode_uploads: True
# 如果检测到gcode文件中存在部件标记，元数据将通过预处理器提取。预处理器将gcode处理成
# 支持取消部分打印内容功能。性能不足的上位机不建议使用此功能。默认False
enable_object_processing: True

[database]
# 此项将不再有配置内容

[data_store]
# 在内存中缓存每个传感器的最大数据量，默认1200，按照每秒1个的话可以持续20分钟
temperature_store_size: 1200
# 在内存中缓存的最大gcode行数，默认1000
gcode_store_size:  1000

[job_queue]
# 当Klipper状态为Ready后，任务队列将尝试切换到下一个等待的任务。
# 如果队列处于暂停状态也会自动恢复。注意job_transition_delay和
# job_transition_gcode配置只对本配置有效。默认False
load_on_startup: True
# 当前任务完成后，任务队列会自动切换到下一个任务，仅适用于传送带式热床
# 或者会自动清理打印件的打印机。关闭本功能后，当前任务完成后将会暂停切换到
# 下一个任务，直到用户手动恢复。默认False
#automatic_transition: False
# 完成一个任务后切换到下一个任务的等待时间，默认不等待
#job_transition_delay:
# 完成一个任务后切换到下一个任务前执行的操作。如果设置了automatic_transition
# 将在该时间后执行。默认不执行任何操作
#job_transition_gcode:


[authorization]
# 信任的IP列表
trusted_clients:
    10.0.0.0/8
    127.0.0.0/8
    169.254.0.0/16
    172.17.0.0/16
    192.168.0.0/16
    FE80::/10
    ::1/128
# 域名
cors_domains:
    *.local

# 强制需要登陆
force_logins: False

[history]
# 启用打印历史记录跟踪

[spoolman]
# 服务地址
server: http://192.168.88.111:8089
# 同步间隔，默认5秒
sync_rate: 5

[timelapse]
# 视频输出位置
output_path: ~/printer_data/timelapse/
# 缓存帧存放位置
frame_path: /tmp/timelapse/printer
# ffmpeg应用位置
#ffmpeg_binary_path: /usr/bin/ffmpeg

[mqtt]
# Broker的IP地址
address: 192.168.88.111
# Broker的端口号
port: 1883
# 是否需要账号密码
#username:
#password:
# MQTT协议版本
mqtt_protocol: v3.1.1

[power VORON]
type: mqtt
command_topic: vast_power_lite/switch/printer/command
command_payload: {command}
retain_command_state: False
#query_topic: vast_power_lite/switch/printer/state
state_topic: vast_power_lite/switch/printer/state
state_response_template: {payload}
query_after_command: False
# klipper状态为shutdown时，是否关闭此设备，默认False
off_when_shutdown: True
# 上面的设置了True才有效，关闭设备的等待时间
off_when_shutdown_delay: 1.
# 当有任务队列时开启设备，如使用了切片软件的上传切片并打印功能，默认False
on_when_job_queued: True
# 打印时锁定开关，防止误关闭，默认False
locked_while_printing: True
# 开启后是否重启Klippe服务并重置设备，默认False
restart_klipper_when_powered: True
# 上面的设置了True才有效，重启前的等待时间，默认1秒，单位秒
restart_delay: 2.
# 将服务与此设备的状态绑定，设备关闭则关闭服务，设备开启则开启服务，默认不绑定
bound_services: 
    klipper
    #webcamd
    #KlipperScreen
    #crowsnest

[power _BED]
type: mqtt
command_topic: vast_power_lite/switch/heater_bed/command
command_payload: {command}
retain_command_state: False
#query_topic: vast_power_lite/switch/heater_bed/state
state_topic: vast_power_lite/switch/heater_bed/state
state_response_template: {payload}
query_after_command: False
# klipper状态为shutdown时，是否关闭此设备，默认False
off_when_shutdown: True
# 上面的设置了True才有效，关闭设备的等待时间
off_when_shutdown_delay: 1.
# 打印时锁定开关，防止误关闭，默认False
locked_while_printing: True

[sensor VAST-Power]
type: mqtt
name: VAST_Power
state_topic: vast_power_lite/sensor/im1266/state
state_response_template:
  {% set edata = payload|fromjson %}
  {set_result("power", edata["power"])}
  {set_result("voltage", edata["voltage"])}
  {set_result("current", edata["current"])}
  {set_result("energy", edata["energy"])}
  {set_result("co2", edata["co2"])}
  {set_result("temperature", edata["temperature"])}
parameter_power:
  units=W
parameter_voltage:
  units=V
parameter_current:
  units=mA
parameter_energy:
  units=kWh
parameter_co2:
  units=kg
parameter_temperature:
  units=℃
history_field_energy_consumption:
  parameter=energy
  desc=打印机耗电量
  strategy=delta
  units=kWh
  init_tracker=true
  precision=6
  exclude_paused=false
  report_total=true
  report_maximum=true
history_field_average_current:
  parameter=current
  desc=平均电流
  strategy=average
  units=A
  report_total=false
  report_maximum=true
history_field_max_current:
  parameter=current
  desc=最大电流
  strategy=maximum
  units=A
  init_tracker=true
  report_total=false
  report_maximum=false

[sensor Filament-Box]
type: mqtt
name: 耗材箱
state_topic: voron/printer/box/state
state_response_template:
  {% set edata = payload|fromjson %}
  {set_result("temperature", edata["temperature"])}
  {set_result("humidity", edata["humidity"])}
parameter_temperature:
  units=℃
parameter_humidity:
  units=%

[octoprint_compat]
# 切片软件上传打印支持

[update_manager]
# 开启后在每间隔24小时的0-4点检查更新。关闭后只在启动时检查更新。默认False
enable_auto_refresh: True
# 包括系统在内的所有组件检查更新的间隔，默认672小时
refresh_interval: 24
# 系统包更新，不支持APT更新的系统需要关闭。默认True
enable_system_updates: True
# 是否使用PackageKit来显示系统包更新进程，默认True
enable_packagekit: True
# dev基于branche更新Klipper和Moonraker，beta基于tag更新Klipper和Moonraker，默认dev
channel: dev

[update_manager mainsail]
type: web
channel: beta
path: ~/mainsail
repo: mainsail-crew/mainsail

[update_manager katapult]
type: git_repo
origin: https://github.com/Arksine/katapult.git
path: ~/katapult
is_system_service: False

[update_manager timelapse]
type: git_repo
primary_branch: main
path: ~/moonraker-timelapse
origin: https://github.com/mainsail-crew/moonraker-timelapse.git
managed_services: klipper moonraker

[update_manager crowsnest]
type: git_repo
path: ~/crowsnest
origin: https://github.com/mainsail-crew/crowsnest.git
managed_services: crowsnest
install_script: tools/pkglist.sh

[update_manager KlipperScreen]
type: git_repo
path: ~/KlipperScreen
origin: https://github.com/jordanruthe/KlipperScreen.git
env: ~/.KlipperScreen-env/bin/python
requirements: scripts/KlipperScreen-requirements.txt
install_script: scripts/KlipperScreen-install.sh
managed_services: KlipperScreen

[update_manager klipper_tmc_autotune]
type: git_repo
channel: dev
path: ~/klipper_tmc_autotune
origin: https://github.com/andrewmcgr/klipper_tmc_autotune.git
managed_services: klipper
primary_branch: main
install_script: install.sh

[update_manager klipper_auto_speed]
type: git_repo
path: ~/klipper_auto_speed
origin: https://github.com/anonoei/klipper_auto_speed.git
primary_branch: main
install_script: install.sh
managed_services: klipper

## Klippain Shake&Tune automatic update management
[update_manager Klippain-ShakeTune]
type: git_repo
origin: https://github.com/Frix-x/klippain-shaketune.git
path: ~/klippain_shaketune
virtualenv: ~/klippain_shaketune-env
requirements: requirements.txt
system_dependencies: system-dependencies.json
primary_branch: main
managed_services: klipper

[update_manager happy-hare]
type: git_repo
path: ~/Happy-Hare
origin: https://github.com/moggieuk/Happy-Hare.git
primary_branch: main
managed_services: klipper

[mmu_server]
enable_file_preprocessor: True
enable_toolchange_next_pos: True
update_spoolman_location: True


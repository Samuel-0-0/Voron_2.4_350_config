########################################################################################################################
# Happy Hare MMU 软件
#
# 根据你的设置编辑此文件
#
# Copyright (C) 2022  moggieuk#6538 (discord) moggieuk@hotmail.com
# 本文件可以在GNU GPLv3许可证的条款下进行分发。
#
# 目标：Happy Hare MMU 硬件配置文件，适用于未知 MCU 板
#
# (\_/)
# ( *,*)
# (")_(") Happy Hare 就绪
#
#
# 关于常见外部 MCU 设置的说明可以在这里找到：
#  https://github.com/moggieuk/Happy-Hare/blob/main/doc/mcu_notes.md
# 
# 关于“触碰”限位开关的说明：Happy Hare 提供了非常灵活的归位选项，可以使用单步进电机或
# 同步步进电机。触碰选项利用了 StallGuard，因此需要在 TMC 驱动器部分设置适当的 'diag_pin' 和 
# stallguard 参数。如果你已经暴露了 diag_pin，定义它是无害的，因为它们仅在明确需要并配置时才会被使用。
#
# 每个步进电机的触碰选项提供以下好处 / 可能性（实验性）：
#  - 在挤出机步进电机上允许自动检测喷嘴！
#  - 在选择器步进电机上允许自动检测卡住的耗材并进行后续恢复
#  - 在齿轮步进电机上允许自动检测挤出机入口
#
# 听起来不错吧？确实是的，但也有一些注意事项：
#  - 一些外部 MCU 在检测 StallGuard 时表现较差，经常导致“欠压错误”
#    通常可以调优选择器触碰（TMC2209），尤其是当你将 'stealthchop_threshold'
#    设置为大于归位速度而小于移动速度时。也就是说，步进电机在归位时运行在 stealthchop 模式。
#    [klipper 专家会知道，它会自动将芯片模式切换到 stealthchop，然后再切换回支持 StallGuard2 的模式，
#    但在归位动作结束时自动切换回 spreadcycle 似乎会引发错误条件，适当设置 'stealthchop_threshold' 可以避免这种情况。可能比你想知道的还要多！]
#  - 我在使用 EASY-BRD 和 ERB MCU 时，齿轮步进电机的触碰（StallGuard）效果不太好，实际上你更需要 spreadcycle 的额外扭矩，因此调整 'stealthchop_threshold' 并不是一个可行的选择
#  - 在挤出机步进电机上启用是可行的，但你可能需要更改主 MCU 上的跳线，暴露出 DIAG 引脚，才能为挤出机步进电机连接的驱动器提供相应的连接。
#
# 总结来说，使用 MMU 进行“触碰”归位是一个高级选项，需要耐心和仔细调试。使用常规的限位开关一切都可以正常工作，
# 对于某些归位点（如挤出机入口），即使没有限位开关，也有替代方法。我对创造性的设置很感兴趣。如果有问题，可以在 Discord 上找我（moggieuk#6538）
#
# 查看 'mmu.cfg' 文件获取串行定义和引脚别名
#
# 支持归位功能的挤出机（非常高级） -----------------------------------------------------------------------------
# 安装 Happy Hare 后，甚至挤出机也可以进行归位。你会发现通常的 'endstop' 参数可以添加到
# '[extruder]' 部分。除非你在喷嘴上安装了某种巧妙的负载传感器，否则这只适用于配置 StallGuard 风格的“触碰”归位。为此，向现有的 '[extruder]' 定义中添加如下行：
#
#    [extruder]
#    endstop_pin: tmc2209_extruder:virtual_endstop
#
# 同时，确保在 TMC 部分添加相应的 StallGuard 配置，例如：
#
#    [tmc2209 extruder]
#    diag_pin: E_DIAG		# 设置为与挤出机连接的 TMC DIAG 引脚的 MCU 引脚
#    driver_SGTHRS: 100		# 255 为最敏感值，0 为最不敏感值
#
# Happy Hare 会自动处理其余部分，并自动添加 'mmu_ext_touch' 限位开关
#

# MMU 机器 / 类型 ---------------------------------------------------------------------------------------------------
# ███╗   ███╗███╗   ███╗██╗   ██╗    ███╗   ███╗ █████╗  ██████╗██╗  ██╗██╗███╗   ██╗███████╗
# ████╗ ████║████╗ ████║██║   ██║    ████╗ ████║██╔══██╗██╔════╝██║  ██║██║████╗  ██║██╔════╝
# ██╔████╔██║██╔████╔██║██║   ██║    ██╔████╔██║███████║██║     ███████║██║██╔██╗ ██║█████╗  
# ██║╚██╔╝██║██║╚██╔╝██║██║   ██║    ██║╚██╔╝██║██╔══██║██║     ██╔══██║██║██║╚██╗██║██╔══╝  
# ██║ ╚═╝ ██║██║ ╚═╝ ██║╚██████╔╝    ██║ ╚═╝ ██║██║  ██║╚██████╗██║  ██║██║██║ ╚████║███████╗
# ╚═╝     ╚═╝╚═╝     ╚═╝ ╚═════╝     ╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝╚══════╝
[mmu_machine]
num_gates: 4			# MMU 上可选择的耗材通道的数量

# MMU 厂商与版本用于自动配置一些参数并验证配置
# 如果是自定义，设置为 "Other" 并取消注释以下额外参数
#
# ERCF          1.1  添加 “s” 后缀表示 Springy，“b” 表示 Binky，“t” 表示 Triple-Decky
#                    例如：“1.1sb”表示 v1.1 配有 Springy 改造和 Binky 编码器
# ERCF          2.0  社区版 ERCFv2
# Tradrack      1.0  如果配备编码器，添加 “e”（假设为 Binky）
# AngryBeaver   1.0
# BoxTurtle     1.0
# NightOwl      1.0
# 3MS           1.0
# 3D Chameleon  1.0
# Prusa         3.0  尚不支持 - 即将推出
# Other              通用设置，可能需要进一步定制 'cad' 参数。请参见 mmu_parameters.cfg 中的文档
#
mmu_vendor: Other			# MMU 系列
mmu_version: 1.0			# MMU 硬件版本号（根据上述文档添加修改后缀）

# 这些参数会根据上述厂商/版本自动设置。仅在自定义设计（"Other"）时取消注释并设置
selector_type: VirtualSelector		# LinearSelector (type-A) or VirtualSelector (type-B)
variable_bowden_lengths: 1		    # 1 = 如果 MMU 设计每个耗材通道有不同的 Bowden 管长度，0 = Bowden 管长度相同
variable_rotation_distances: 1		# 1 = 如果 MMU 设计有不同的驱动/BMG 齿轮，从而有不同的旋转距离，0 = 只有一个驱动齿轮（例如 Tradrack）
require_bowden_move: 1	        	# 1 = 如果 MMU 设计包含 Bowden 移动（包括在加载/卸载过程中），0 = 零长度 Bowden（跳过 Bowden 移动）
filament_always_gripped: 1		    # 1 = 耗材始终被 MMU 捕捉（大多数 type-B 设计），0 = MMU 可以释放耗材
#has_bypass: {has_bypass}		    # 1 = 可用旁路耗材通道，0 = 无法进行耗材旁路


# 耗材驱动齿轮步进电机 --------------------------------------------------------------------------------------
#  ██████╗ ███████╗ █████╗ ██████╗ 
# ██╔════╝ ██╔════╝██╔══██╗██╔══██╗
# ██║  ███╗█████╗  ███████║██████╔╝
# ██║   ██║██╔══╝  ██╔══██║██╔══██╗
# ╚██████╔╝███████╗██║  ██║██║  ██║
#  ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
# 请注意，如果定义了工具头传感器或耗材通道传感器，则会自动添加 'toolhead' 和 'mmu_gear' 限位开关
#
# 默认值经过 ERCF BOM NEMA14 电机测试。请根据您使用的电机调整这些值
# 示例：对于 NEMA17 电机，通常需要使用更高的电流
#
[tmc2209 stepper_mmu_gear]
uart_pin: mmu:MMU_GEAR_UART
run_current: 0.7			    # ERCF BOM NEMA14 电机
hold_current: 0.1			    # 如果不使用“触碰”或移动（TMC stallguard），建议设置为较小
interpolate: True
sense_resistor: 0.110			# 通常为 0.11，BTT TMC2226 为 0.15
stealthchop_threshold: 0		# Spreadcycle 提供更大的扭矩且速度更好
#
# 如果您使用 TMC 并希望启用耗材“触碰”归位功能（用于齿轮步进电机），请取消注释下面两行
#diag_pin: ^mmu:MMU_GEAR_DIAG		# 设置为与齿轮步进电机的 TMC DIAG 引脚连接的 MCU 引脚
#driver_SGTHRS: 60			        # 255 为最敏感值，0 为最不敏感值

[stepper_mmu_gear]
step_pin: mmu:MMU_GEAR_STEP
dir_pin: !mmu:MMU_GEAR_DIR
enable_pin: !mmu:MMU_GEAR_ENABLE
rotation_distance: 22.7316868		# Bondtech 5mm 驱动齿轮。由 'mmu_gear_rotation_distance' 在 mmu_vars.cfg 中覆盖
gear_ratio: 1:1			            # 例如 ERCF 80:20，Tradrack 50:17
microsteps: 16 				        # 推荐 16。仅当您在同步时遇到“步进压缩”问题时才增加
full_steps_per_rotation: 200		# 1.8 度电机为 200，0.9 度电机为 400
#
# 如果您希望启用耗材“触碰”归位功能（用于齿轮电机），请取消注释下面两行
#extra_endstop_pins: tmc2209_stepper_mmu_gear:virtual_endstop
#extra_endstop_names: mmu_gear_touch

# 为 TYPE-B MMU 添加额外的耗材驱动齿轮步进电机 -------------------------------------------------------------
# 请注意，常见参数会从基本的 stepper_mmu_gear 中继承，但也可以在此处单独指定
#
# 耗材驱动齿轮_1 --------------------------
[tmc2209 stepper_mmu_gear_1]
uart_pin: mmu:MMU_GEAR_UART_1

[stepper_mmu_gear_1]
step_pin: mmu:MMU_GEAR_STEP_1
dir_pin: !mmu:MMU_GEAR_DIR_1
enable_pin: !mmu:MMU_GEAR_ENABLE_1

# 耗材驱动齿轮_2 --------------------------
[tmc2209 stepper_mmu_gear_2]
uart_pin: mmu:MMU_GEAR_UART_2

[stepper_mmu_gear_2]
step_pin: mmu:MMU_GEAR_STEP_2
dir_pin: !mmu:MMU_GEAR_DIR_2
enable_pin: !mmu:MMU_GEAR_ENABLE_2

# 耗材驱动齿轮_3 --------------------------
[tmc2209 stepper_mmu_gear_3]
uart_pin: mmu:MMU_GEAR_UART_3

[stepper_mmu_gear_3]
step_pin: mmu:MMU_GEAR_STEP_3
dir_pin: !mmu:MMU_GEAR_DIR_3
enable_pin: !mmu:MMU_GEAR_ENABLE_3


# 舵机 ---------------------------------------------------------------------------------------------------------------
# ███████╗███████╗██████╗ ██╗   ██╗ ██████╗ ███████╗
# ██╔════╝██╔════╝██╔══██╗██║   ██║██╔═══██╗██╔════╝
# ███████╗█████╗  ██████╔╝██║   ██║██║   ██║███████╗
# ╚════██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██║   ██║╚════██║
# ███████║███████╗██║  ██║ ╚████╔╝ ╚██████╔╝███████║
# ╚══════╝╚══════╝╚═╝  ╚═╝  ╚═══╝   ╚═════╝ ╚══════╝
# 基本的舵机 PWM 设置。如果这些值被更改，那么为不同位置定义的角度也会改变
#
# 可选的门架舵机用于工具头耗材切割器 ------------------------------------------------------------------
#
# (如果您有用于工具头切割针的门架舵机，请取消注释此部分)
#[mmu_servo mmu_gantry_servo]
#pin: 
#maximum_servo_angle:180
#minimum_pulse_width: 0.00075
#maximum_pulse_width: 0.00225
#initial_angle: 180


# 编码器 -------------------------------------------------------------------------------------------------------------
# ███████╗███╗   ██╗ ██████╗ ██████╗ ██████╗ ███████╗██████╗ 
# ██╔════╝████╗  ██║██╔════╝██╔═══██╗██╔══██╗██╔════╝██╔══██╗
# █████╗  ██╔██╗ ██║██║     ██║   ██║██║  ██║█████╗  ██████╔╝
# ██╔══╝  ██║╚██╗██║██║     ██║   ██║██║  ██║██╔══╝  ██╔══██╗
# ███████╗██║ ╚████║╚██████╗╚██████╔╝██████╔╝███████╗██║  ██║
# ╚══════╝╚═╝  ╚═══╝ ╚═════╝ ╚═════╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝
# 编码器测量距离，监控耗材的缺料和堵塞，并持续计算流量百分比
# 请注意，这里设置的编码器分辨率仅仅是一个默认值，用于开始使用。它会在校准后被正确设置，并存储在 mmu_vars.cfg 中
#
# 编码器分辨率将被校准，但需要一个默认的近似值
# 如果是基于 BMG 齿轮：
#   分辨率 = bmg 圆周 / (2 * 齿数)
# 24 / (2 * 17) = 0.7059 用于 TRCT5000 基于传感器
# 24 / (2 * 12) = 1.0 用于带有 12 齿盘的 Binky
#
[mmu_encoder mmu_encoder]
encoder_pin: ^mmu:MMU_ENCODER		# EASY-BRD: ^PA6, Flytech ERB: ^gpio22
encoder_resolution: 1.0			    # 这只是一个起始值。由 mmu_vars.cfg 中的 'mmu_encoder_resolution' 覆盖
desired_headroom: 5.0			    # MMU 尝试维持的堵塞/缺料裕度（触发缺料的最接近点）
average_samples: 4			        # 最后测量的“阻尼”效果（较高的值意味着堵塞长度减少更慢）
flowrate_samples: 20			    # 编码器上有多少次挤出机“移动”来测量流量计算

# 耗材传感器 -----------------------------------------------------------------------------------------------------
# ███████╗███████╗███╗   ██╗███████╗ ██████╗ ██████╗ ███████╗
# ██╔════╝██╔════╝████╗  ██║██╔════╝██╔═══██╗██╔══██╗██╔════╝
# ███████╗█████╗  ██╔██╗ ██║███████╗██║   ██║██████╔╝███████╗
# ╚════██║██╔══╝  ██║╚██╗██║╚════██║██║   ██║██╔══██╗╚════██║
# ███████║███████╗██║ ╚████║███████║╚██████╔╝██║  ██║███████║
# ╚══════╝╚══════╝╚═╝  ╚═══╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝
# 定义可选的耗材路径传感器的引脚。除了预耗材通道传感器之外，其他所有传感器都会自动设置为
# 端点开关（用于归位）和传感器，以便进行可视化。
#
# 'pre_gate_switch_pin_X'  .. 'mmu_pre_gate_X' 传感器检测耗材进入MMU时的位置。X=耗材通道编号（0..N）
# 'gate_switch_pin'        .. 'mmu_gate' 共享传感器检测MMU的耗材通道后方的耗材
#     或者
# 'post_gear_switch_pin_X' .. 'mmu_gear_X' 每个耗材的齿轮后传感器
# 'extruder_switch_pin'    .. 'extruder' 传感器检测耗材进入挤出机前的位置
# 'toolhead_switch_pin'    .. 'toolhead' 传感器检测耗材进入挤出机后的位置
#
# 同步电机反馈通常会有一个张力开关（更重要）或同时具有张力和压缩开关
# 'sync_feedback_tension_pin'     .. 当耗材处于张力状态时，激活的开关引脚
# 'sync_feedback_compression_pin' .. 当耗材处于压缩状态时，激活的开关引脚
#
# 配置非常灵活：只需定义任何传感器的引脚，如果没有设置引脚（或别名为空），
# 则会被忽略。你也可以注释掉不使用的部分。

[mmu_sensors]
pre_gate_switch_pin_0: ^mmu:MMU_PRE_GATE_0
pre_gate_switch_pin_1: ^mmu:MMU_PRE_GATE_1
pre_gate_switch_pin_2: ^mmu:MMU_PRE_GATE_2
pre_gate_switch_pin_3: ^mmu:MMU_PRE_GATE_3

post_gear_switch_pin_0: ^mmu:MMU_POST_GEAR_0
post_gear_switch_pin_1: ^mmu:MMU_POST_GEAR_1
post_gear_switch_pin_2: ^mmu:MMU_POST_GEAR_2
post_gear_switch_pin_3: ^mmu:MMU_POST_GEAR_3

gate_switch_pin: ^mmu:MMU_GATE_SENSOR

extruder_switch_pin: 
toolhead_switch_pin: 

sync_feedback_tension_pin: 
sync_feedback_compression_pin: 


# MMU 可选的 Neopixel LED 支持 ------------------------------------------------------------------------------------
# ██╗     ███████╗██████╗ ███████╗
# ██║     ██╔════╝██╔══██╗██╔════╝
# ██║     █████╗  ██║  ██║███████╗
# ██║     ██╔══╝  ██║  ██║╚════██║
# ███████╗███████╗██████╔╝███████║
# ╚══════╝╚══════╝╚═════╝ ╚══════╝
# 定义 LED 连接、类型和长度
#
# （如果没有 LED，请注释掉此部分）
#[neopixel mmu_leds]
#pin: mmu:MMU_NEOPIXEL
#chain_count: 9			# 耗材通道数量 x1 或 x2 + 1（如果需要显示状态）
#color_order: GRBW		# 根据您的具体 neopixel 规格设置

# MMU LED 效果段 --------------------------------------------------------------------------------------------------
# 为您的 MMU 定义 neopixel LED。chain_count 必须足够大，以适应您所需的范围：
#   exit   .. 这一组 LED，每个耗材通道一个，通常安装在耗材通道的出口点
#   entry  .. 这一组 LED，每个耗材通道一个，可能安装在耗材进入 MMU/缓存的入口点
#   status .. 这一单个 LED 表示当前选择的耗材状态
#
# 请注意，所有设置都是可选的。您可以简单地只配置 'exit' 设置。例如，配置入口和出口 LED 的优点是：
#   入口 LED 可以显示耗材通道的状态，而出口 LED 显示颜色
# 
# 动画效果需要安装 Julian Schill 的出色 LED 效果模块，否则 LED 将保持静态：
#   https://github.com/julianschill/klipper-led_effect
# LED 在链中按 1..N 索引排列。因此，设置 'exit' 和在 4 耗材通道 MMU 上配置单个 'status' LED：
#   exit_range:   1-4
#   status_index: 5
# 在这个例子中，没有配置 'entry' 设置。
#
# 请注意，范围顺序很重要，并且取决于您的接线方式。因此，1-4 和 4-1 都表示相同的 LED 范围，
# 但分别映射到递增或递减的耗材通道。
#
# 请注意，Happy Hare 提供了一个方便的封装 [mmu_led_effect]，它不仅对每个指定的 [mmu_leds] 段创建效果，
# 还对每个单独的 LED 进行原子控制。请参阅 mmu_leds.cfg 以获取示例。
#
# （如果上面的 'led_strip' 不存在，则此部分无害且被忽略 - LED 支持将被禁用）
#[mmu_leds]
#exit_leds: neopixel:mmu_leds (1-4)
#entry_leds: neopixel:mmu_leds (8-5)
#status_leds: neopixel:mmu_leds (9)
#frame_rate: 24

